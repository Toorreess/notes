/*
 * Scheduler.h
 *
 *  Created on: 1 mar. 2023
 *      Author: galvez
 */

#ifndef SCHEDULER_H_
#define SCHEDULER_H_

#include "List.h"

#define NUM_PROCESSORS 4

typedef struct Scheduler {
	unsigned int numProcesses;
	TList vector[NUM_PROCESSORS];
} TScheduler;

// Return a Scheduler filled with empty lists and numProcesses 0.
//
TScheduler createScheduler();

// Insert a new node in the list associated to the position processorId of the array.
// If the processorId is beyond NUM_PROCESSORS, ok should return 0, else 1.
void insertScheduler(TScheduler * ptrS, char * name, int value, unsigned char processorId, unsigned char * ok);

// Print the Scheduler on fout following the next structure:
// numProcesses
// length of the list at position 0 of vector
// show of the list at position 0 of vector
// length of the list at position 1 of vector
// show of the list at position 2 of vector
// ...
// length of the list at position NUM_PROCESSORS-1 of vector
// show of the list at position NUM_PROCESSORS-1 of vector
void showScheduler(TScheduler * ptrS);

// Read a file with the structure generated by the previous function show.
// Creates a brand new Scheduler with such an information.
TScheduler readFile(char * filename, unsigned char * ok);

// Return true if numProcesses is equals to the sum
// of all the nodes in all the lists of the Scheduler.
unsigned char checkScheduler(TScheduler * ptrS);

// Free the memory used by the Scheduler.
// Reset the Scheduler to the create state.
void destroyScheduler(TScheduler * ptrS);

#endif /* SCHEDULER_H_ */
